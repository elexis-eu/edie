"""
    ELEXIS Protocol for accessing dictionaries

    This protocol allows data to be shared with the ELEXIS platform and should be implemented by all providers of data to the ELEXIS platform. This is an OpenAPI documentation, for more details about using this specification, please refer to OpenAPI documentations: https://swagger.io/resources/articles/documenting-apis-with-swagger/  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.entry import Entry
from openapi_client.model.inline_response200 import InlineResponse200
from openapi_client.model.inline_response500 import InlineResponse500
from openapi_client.model.metadata import Metadata
from openapi_client.model.ontolex_entry import OntolexEntry


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __about(
            self,
            dictionary,
            **kwargs
        ):
            """About the dictionary  # noqa: E501

            Get the metadata about the dictionary, including the conditions under which it can be included in the Dictionary Matrix  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.about(dictionary, async_req=True)
            >>> result = thread.get()

            Args:
                dictionary (str): Identifier of the dictionary to describe

            Keyword Args:
                x_api_key (str): An API key to authorize access to this endpoint if necessary. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Metadata
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['dictionary'] = \
                dictionary
            return self.call_with_http_info(**kwargs)

        self.about = _Endpoint(
            settings={
                'response_type': (Metadata,),
                'auth': [],
                'endpoint_path': '/about/{dictionary}',
                'operation_id': 'about',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dictionary',
                    'x_api_key',
                ],
                'required': [
                    'dictionary',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dictionary':
                        (str,),
                    'x_api_key':
                        (str,),
                },
                'attribute_map': {
                    'dictionary': 'dictionary',
                    'x_api_key': 'X-API-KEY',
                },
                'location_map': {
                    'dictionary': 'path',
                    'x_api_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__about
        )

        def __dictionaries(
            self,
            **kwargs
        ):
            """Get dictionaries  # noqa: E501

            List all of the dictionaries that are available at this endpoint  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.dictionaries(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                x_api_key (str): An API key to authorize access to this endpoint if necessary. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InlineResponse200
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.dictionaries = _Endpoint(
            settings={
                'response_type': (InlineResponse200,),
                'auth': [],
                'endpoint_path': '/dictionaries',
                'operation_id': 'dictionaries',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_api_key',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_api_key':
                        (str,),
                },
                'attribute_map': {
                    'x_api_key': 'X-API-KEY',
                },
                'location_map': {
                    'x_api_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__dictionaries
        )

        def __get_all(
            self,
            dictionary,
            **kwargs
        ):
            """Get all lemmas  # noqa: E501

            Get all of the entries contained within this dictionary  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_all(dictionary, async_req=True)
            >>> result = thread.get()

            Args:
                dictionary (str): The identifier of the dictionary to list

            Keyword Args:
                limit (int): The maximum number of entries to return. [optional]
                offset (int): The offset (index of first entry) to return. [optional] if omitted the server will use the default value of 0
                x_api_key (str): An API key to authorize access to this endpoint if necessary. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Entry]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['dictionary'] = \
                dictionary
            return self.call_with_http_info(**kwargs)

        self.get_all = _Endpoint(
            settings={
                'response_type': ([Entry],),
                'auth': [],
                'endpoint_path': '/list/{dictionary}',
                'operation_id': 'get_all',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dictionary',
                    'limit',
                    'offset',
                    'x_api_key',
                ],
                'required': [
                    'dictionary',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dictionary':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'x_api_key':
                        (str,),
                },
                'attribute_map': {
                    'dictionary': 'dictionary',
                    'limit': 'limit',
                    'offset': 'offset',
                    'x_api_key': 'X-API-KEY',
                },
                'location_map': {
                    'dictionary': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'x_api_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_all
        )

        def __get_by_lemma(
            self,
            dictionary,
            headword,
            **kwargs
        ):
            """Headword lookup  # noqa: E501

            Given a headword, find all the entries that are listed under this headword  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_by_lemma(dictionary, headword, async_req=True)
            >>> result = thread.get()

            Args:
                dictionary (str): The identifier of the dictionary containing the entries
                headword (str): The lemma of the headword to lookup

            Keyword Args:
                part_of_speech (str): A part of speech tag that the entry has, this must be one of the value from the Universal Part-of-Speech Tagset (http://universaldependencies.org/u/pos/). [optional]
                limit (int): The maximum number of entries to return. [optional]
                offset (int): The offset (index of first entry) to return. [optional] if omitted the server will use the default value of 0
                inflected (bool): If true treat the query as an inflected form and return all lemmas that may be a form of this query. [optional] if omitted the server will use the default value of False
                x_api_key (str): An API key to authorize access to this endpoint if necessary. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Entry]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['dictionary'] = \
                dictionary
            kwargs['headword'] = \
                headword
            return self.call_with_http_info(**kwargs)

        self.get_by_lemma = _Endpoint(
            settings={
                'response_type': ([Entry],),
                'auth': [],
                'endpoint_path': '/lemma/{dictionary}/{headword}',
                'operation_id': 'get_by_lemma',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dictionary',
                    'headword',
                    'part_of_speech',
                    'limit',
                    'offset',
                    'inflected',
                    'x_api_key',
                ],
                'required': [
                    'dictionary',
                    'headword',
                ],
                'nullable': [
                ],
                'enum': [
                    'part_of_speech',
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_minimum': 1,
                    },
                    ('offset',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('part_of_speech',): {

                        "ADJ": "ADJ",
                        "ADP": "ADP",
                        "ADV": "ADV",
                        "AUX": "AUX",
                        "CCONJ": "CCONJ",
                        "DET": "DET",
                        "INTJ": "INTJ",
                        "NOUN": "NOUN",
                        "NUM": "NUM",
                        "PART": "PART",
                        "PRON": "PRON",
                        "PROPN": "PROPN",
                        "PUNCT": "PUNCT",
                        "SCONJ": "SCONJ",
                        "SYM": "SYM",
                        "VERB": "VERB",
                        "X": "X"
                    },
                },
                'openapi_types': {
                    'dictionary':
                        (str,),
                    'headword':
                        (str,),
                    'part_of_speech':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'inflected':
                        (bool,),
                    'x_api_key':
                        (str,),
                },
                'attribute_map': {
                    'dictionary': 'dictionary',
                    'headword': 'headword',
                    'part_of_speech': 'partOfSpeech',
                    'limit': 'limit',
                    'offset': 'offset',
                    'inflected': 'inflected',
                    'x_api_key': 'X-API-KEY',
                },
                'location_map': {
                    'dictionary': 'path',
                    'headword': 'path',
                    'part_of_speech': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'inflected': 'query',
                    'x_api_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_by_lemma
        )

        def __get_entry_as_onto_lex_by_id(
            self,
            dictionary,
            id,
            **kwargs
        ):
            """Entry as Turtle  # noqa: E501

            Return the dictionary entry as an RDF Turtle Document. Services must implement at least one of the `/json`, `/tei` or `/ontolex` actions.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_entry_as_onto_lex_by_id(dictionary, id, async_req=True)
            >>> result = thread.get()

            Args:
                dictionary (str): The dictionary containing the entry
                id (str):

            Keyword Args:
                x_api_key (str): An API key to authorize access to this endpoint if necessary. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['dictionary'] = \
                dictionary
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_entry_as_onto_lex_by_id = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/ontolex/{dictionary}/{id}',
                'operation_id': 'get_entry_as_onto_lex_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dictionary',
                    'id',
                    'x_api_key',
                ],
                'required': [
                    'dictionary',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dictionary':
                        (str,),
                    'id':
                        (str,),
                    'x_api_key':
                        (str,),
                },
                'attribute_map': {
                    'dictionary': 'dictionary',
                    'id': 'id',
                    'x_api_key': 'X-API-KEY',
                },
                'location_map': {
                    'dictionary': 'path',
                    'id': 'path',
                    'x_api_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/turtle',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_entry_as_onto_lex_by_id
        )

        def __get_entry_as_teiby_id(
            self,
            dictionary,
            id,
            **kwargs
        ):
            """Entry XML  # noqa: E501

            Return the TEI-Lex0 representation of the document. Services must implement at least one of the `/ontolex`, `/json` or `/tei` actions.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_entry_as_teiby_id(dictionary, id, async_req=True)
            >>> result = thread.get()

            Args:
                dictionary (str): The dictionary containing the entry
                id (str):

            Keyword Args:
                x_api_key (str): An API key to authorize access to this endpoint if necessary. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                bool, date, datetime, dict, float, int, list, str, none_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['dictionary'] = \
                dictionary
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_entry_as_teiby_id = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [],
                'endpoint_path': '/tei/{dictionary}/{id}',
                'operation_id': 'get_entry_as_teiby_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dictionary',
                    'id',
                    'x_api_key',
                ],
                'required': [
                    'dictionary',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dictionary':
                        (str,),
                    'id':
                        (str,),
                    'x_api_key':
                        (str,),
                },
                'attribute_map': {
                    'dictionary': 'dictionary',
                    'id': 'id',
                    'x_api_key': 'X-API-KEY',
                },
                'location_map': {
                    'dictionary': 'path',
                    'id': 'path',
                    'x_api_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/xml',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_entry_as_teiby_id
        )

        def __get_entry_by_id(
            self,
            dictionary,
            id,
            **kwargs
        ):
            """Entry as JSON  # noqa: E501

            Return the Entry directly as a JSON document. Services must implement at least one of the `/json`, `/ontolex` or `/tei` actions.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_entry_by_id(dictionary, id, async_req=True)
            >>> result = thread.get()

            Args:
                dictionary (str): The identifier of the dictionary containing the entry
                id (str): The identifier of the entry

            Keyword Args:
                x_api_key (str): An API key to authorize access to this endpoint if necessary. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OntolexEntry
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['dictionary'] = \
                dictionary
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_entry_by_id = _Endpoint(
            settings={
                'response_type': (OntolexEntry,),
                'auth': [],
                'endpoint_path': '/json/{dictionary}/{id}',
                'operation_id': 'get_entry_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'dictionary',
                    'id',
                    'x_api_key',
                ],
                'required': [
                    'dictionary',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'dictionary':
                        (str,),
                    'id':
                        (str,),
                    'x_api_key':
                        (str,),
                },
                'attribute_map': {
                    'dictionary': 'dictionary',
                    'id': 'id',
                    'x_api_key': 'X-API-KEY',
                },
                'location_map': {
                    'dictionary': 'path',
                    'id': 'path',
                    'x_api_key': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_entry_by_id
        )
