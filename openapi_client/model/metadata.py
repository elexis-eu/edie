"""
    ELEXIS Protocol for accessing dictionaries

    This protocol allows data to be shared with the ELEXIS platform and should be implemented by all providers of data to the ELEXIS platform. This is an OpenAPI documentation, for more details about using this specification, please refer to OpenAPI documentations: https://swagger.io/resources/articles/documenting-apis-with-swagger/  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.agent import Agent
    from openapi_client.model.agent_class import AgentClass
    from openapi_client.model.date_time import DateTime
    globals()['Agent'] = Agent
    globals()['AgentClass'] = AgentClass
    globals()['DateTime'] = DateTime


class Metadata(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('release',): {
            'PUBLIC': "PUBLIC",
            'NONCOMMERCIAL': "NONCOMMERCIAL",
            'RESEARCH': "RESEARCH",
            'PRIVATE': "PRIVATE",
        },
        ('genre',): {
            'GEN': "gen",
            'LRN': "lrn",
            'ETY': "ety",
            'SPE': "spe",
            'HIS': "his",
            'ORT': "ort",
            'TRM': "trm",
        },
    }

    validations = {
        ('source_language',): {
            'regex': {
                'pattern': r'\w{2,3}',  # noqa: E501
            },
        },
        ('target_language',): {
            'min_items': 1,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'release': (str,),  # noqa: E501
            'source_language': (str,),  # noqa: E501
            'target_language': ([str],),  # noqa: E501
            'genre': ([str],),  # noqa: E501
            'license': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'title': (str,),  # noqa: E501
            'creator': ([Agent],),  # noqa: E501
            'publisher': ([Agent],),  # noqa: E501
            'abstract': (str,),  # noqa: E501
            'accrual_method': (str,),  # noqa: E501
            'accrual_periodicity': (str,),  # noqa: E501
            'accrual_policy': (str,),  # noqa: E501
            'alternative': (str,),  # noqa: E501
            'audience': (str,),  # noqa: E501
            'available': (date,),  # noqa: E501
            'bibliographic_citation': (str,),  # noqa: E501
            'conforms_to': (str,),  # noqa: E501
            'contributor': ([Agent],),  # noqa: E501
            'coverage': (str,),  # noqa: E501
            'created': (date,),  # noqa: E501
            'date': (DateTime,),  # noqa: E501
            'date_accepted': (date,),  # noqa: E501
            'date_copyrighted': (date,),  # noqa: E501
            'date_submitted': (date,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'education_level': (str,),  # noqa: E501
            'extent': (str,),  # noqa: E501
            'has_format': (str,),  # noqa: E501
            'has_part': (str,),  # noqa: E501
            'has_version': (str,),  # noqa: E501
            'identifier': (str,),  # noqa: E501
            'instructional_method': (str,),  # noqa: E501
            'is_format_of': (str,),  # noqa: E501
            'is_part_of': (str,),  # noqa: E501
            'is_referenced_by': (str,),  # noqa: E501
            'is_replaced_by': (str,),  # noqa: E501
            'is_required_by': (str,),  # noqa: E501
            'issued': (date,),  # noqa: E501
            'is_version_of': (str,),  # noqa: E501
            'mediator': ([AgentClass],),  # noqa: E501
            'modified': (date,),  # noqa: E501
            'provenance': (str,),  # noqa: E501
            'references': (str,),  # noqa: E501
            'relation': (str,),  # noqa: E501
            'replaces': (str,),  # noqa: E501
            'requires': (str,),  # noqa: E501
            'rights': (str,),  # noqa: E501
            'rights_holder': ([Agent],),  # noqa: E501
            'source': (str,),  # noqa: E501
            'spatial': (str,),  # noqa: E501
            'subject': (str,),  # noqa: E501
            'table_of_contents': (str,),  # noqa: E501
            'temporal': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'valid': (date,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'release': 'release',  # noqa: E501
        'source_language': 'sourceLanguage',  # noqa: E501
        'target_language': 'targetLanguage',  # noqa: E501
        'genre': 'genre',  # noqa: E501
        'license': 'license',  # noqa: E501
        'title': 'title',  # noqa: E501
        'creator': 'creator',  # noqa: E501
        'publisher': 'publisher',  # noqa: E501
        'abstract': 'abstract',  # noqa: E501
        'accrual_method': 'accrualMethod',  # noqa: E501
        'accrual_periodicity': 'accrualPeriodicity',  # noqa: E501
        'accrual_policy': 'accrualPolicy',  # noqa: E501
        'alternative': 'alternative',  # noqa: E501
        'audience': 'audience',  # noqa: E501
        'available': 'available',  # noqa: E501
        'bibliographic_citation': 'bibliographicCitation',  # noqa: E501
        'conforms_to': 'conformsTo',  # noqa: E501
        'contributor': 'contributor',  # noqa: E501
        'coverage': 'coverage',  # noqa: E501
        'created': 'created',  # noqa: E501
        'date': 'date',  # noqa: E501
        'date_accepted': 'dateAccepted',  # noqa: E501
        'date_copyrighted': 'dateCopyrighted',  # noqa: E501
        'date_submitted': 'dateSubmitted',  # noqa: E501
        'description': 'description',  # noqa: E501
        'education_level': 'educationLevel',  # noqa: E501
        'extent': 'extent',  # noqa: E501
        'has_format': 'hasFormat',  # noqa: E501
        'has_part': 'hasPart',  # noqa: E501
        'has_version': 'hasVersion',  # noqa: E501
        'identifier': 'identifier',  # noqa: E501
        'instructional_method': 'instructionalMethod',  # noqa: E501
        'is_format_of': 'isFormatOf',  # noqa: E501
        'is_part_of': 'isPartOf',  # noqa: E501
        'is_referenced_by': 'isReferencedBy',  # noqa: E501
        'is_replaced_by': 'isReplacedBy',  # noqa: E501
        'is_required_by': 'isRequiredBy',  # noqa: E501
        'issued': 'issued',  # noqa: E501
        'is_version_of': 'isVersionOf',  # noqa: E501
        'mediator': 'mediator',  # noqa: E501
        'modified': 'modified',  # noqa: E501
        'provenance': 'provenance',  # noqa: E501
        'references': 'references',  # noqa: E501
        'relation': 'relation',  # noqa: E501
        'replaces': 'replaces',  # noqa: E501
        'requires': 'requires',  # noqa: E501
        'rights': 'rights',  # noqa: E501
        'rights_holder': 'rightsHolder',  # noqa: E501
        'source': 'source',  # noqa: E501
        'spatial': 'spatial',  # noqa: E501
        'subject': 'subject',  # noqa: E501
        'table_of_contents': 'tableOfContents',  # noqa: E501
        'temporal': 'temporal',  # noqa: E501
        'type': 'type',  # noqa: E501
        'valid': 'valid',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, release, source_language, target_language, genre, license, title, creator, publisher, *args, **kwargs):  # noqa: E501
        """Metadata - a model defined in OpenAPI

        Args:
            release (str): The conditions under which this dictionary (or data from this dictionary) can be included in the ELEXIS Matrix Dictionary
            source_language (str): The language of the lemmas in the dictionary, as an ISO 639-1,2,3 code. If a (two-letter) ISO 639-1 code exists this should be used in preference
            target_language ([str]): The languages of the entries in the dictionary, can be identical to the source language or another language (for example in a bilingual dictionary).
            genre ([str]): The genre of the dictionary.  `gen` **General dictionaries** are dictionaries that document contemporary vocabulary and are intended for everyday reference by native and fluent speakers.    `lrn` **Learners' dictionaries** are intended for people who are learning the language as a second language.   `ety` **Etymological dictionaries** are dictionaries that explain the origins of words.   `spe` **Dictionaries on special topics** are dictionaries that focus on a specific subset of the vocabulary (such as new words or phrasal verbs) or which focus on a specific dialect or variant of the language.   `his` **Historical dictionaries** are dictionaries that document previous historical states of the language.   `ort` **Spelling dictionaries** are dictionaries which codify the correct spelling and other aspects of the orthography of words.    `trm` **Terminological dictionaries** describe the vocabulary of specialized domains such as biology, mathematics or economics.   
            license (bool, date, datetime, dict, float, int, list, str, none_type): The license that can be used to republish this data
            title (str): The title of the resource
            creator ([Agent]): The creator of the resource
            publisher ([Agent]): The publisher of This Resource

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            abstract (str): A summary of the resource.. [optional]  # noqa: E501
            accrual_method (str): The method by which items are added to a collection.. [optional]  # noqa: E501
            accrual_periodicity (str): The frequency with which items are added to a collection.. [optional]  # noqa: E501
            accrual_policy (str): The policy governing the addition of items to a collection.. [optional]  # noqa: E501
            alternative (str): An alternative name for the resource.. [optional]  # noqa: E501
            audience (str): A class of entity for whom the resource is intended or useful.. [optional]  # noqa: E501
            available (date): Date that the resource became or will become available.. [optional]  # noqa: E501
            bibliographic_citation (str): A bibliographic reference for the resource.. [optional]  # noqa: E501
            conforms_to (str): An established standard to which the described resource conforms.. [optional]  # noqa: E501
            contributor ([Agent]): An entity responsible for making contributions to the resource.. [optional]  # noqa: E501
            coverage (str): The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.. [optional]  # noqa: E501
            created (date): Date of creation of the resource.. [optional]  # noqa: E501
            date (DateTime): A point or period of time associated with an event in the lifecycle of the resource.. [optional]  # noqa: E501
            date_accepted (date): Date of acceptance of the resource.. [optional]  # noqa: E501
            date_copyrighted (date): Date of copyright.. [optional]  # noqa: E501
            date_submitted (date): Date of submission of the resource.. [optional]  # noqa: E501
            description (str): An account of the resource.. [optional]  # noqa: E501
            education_level (str): A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.. [optional]  # noqa: E501
            extent (str): The size or duration of the resource.. [optional]  # noqa: E501
            has_format (str): A related resource that is substantially the same as the pre-existing described resource, but in another format.. [optional]  # noqa: E501
            has_part (str): A related resource that is included either physically or logically in the described resource.. [optional]  # noqa: E501
            has_version (str): A related resource that is a version, edition, or adaptation of the described resource.. [optional]  # noqa: E501
            identifier (str): An unambiguous reference to the resource within a given context.. [optional]  # noqa: E501
            instructional_method (str): A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.. [optional]  # noqa: E501
            is_format_of (str): A related resource that is substantially the same as the described resource, but in another format.. [optional]  # noqa: E501
            is_part_of (str): A related resource in which the described resource is physically or logically included.. [optional]  # noqa: E501
            is_referenced_by (str): A related resource that references, cites, or otherwise points to the described resource.. [optional]  # noqa: E501
            is_replaced_by (str): A related resource that supplants, displaces, or supersedes the described resource.. [optional]  # noqa: E501
            is_required_by (str): A related resource that requires the described resource to support its function, delivery, or coherence.. [optional]  # noqa: E501
            issued (date): Date of formal issuance (e.g., publication) of the resource.. [optional]  # noqa: E501
            is_version_of (str): A related resource of which the described resource is a version, edition, or adaptation.. [optional]  # noqa: E501
            mediator ([AgentClass]): An entity that mediates access to the resource and for whom the resource is intended or useful.. [optional]  # noqa: E501
            modified (date): Date on which the resource was changed.. [optional]  # noqa: E501
            provenance (str): A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.. [optional]  # noqa: E501
            references (str): A related resource that is referenced, cited, or otherwise pointed to by the described resource.. [optional]  # noqa: E501
            relation (str): A related resource.. [optional]  # noqa: E501
            replaces (str): A related resource that is supplanted, displaced, or superseded by the described resource.. [optional]  # noqa: E501
            requires (str): A related resource that is required by the described resource to support its function, delivery, or coherence.. [optional]  # noqa: E501
            rights (str): Information about rights held in and over the resource.. [optional]  # noqa: E501
            rights_holder ([Agent]): A person or organization owning or managing rights over the resource.. [optional]  # noqa: E501
            source (str): A related resource from which the described resource is derived.. [optional]  # noqa: E501
            spatial (str): Spatial characteristics of the resource.. [optional]  # noqa: E501
            subject (str): The topic of the resource.. [optional]  # noqa: E501
            table_of_contents (str): A list of subunits of the resource.. [optional]  # noqa: E501
            temporal (str): Temporal characteristics of the resource.. [optional]  # noqa: E501
            type (str): The nature or genre of the resource.. [optional]  # noqa: E501
            valid (date): Date of validity of a resource.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.release = release
        self.source_language = source_language
        self.target_language = target_language
        self.genre = genre
        self.license = license
        self.title = title
        self.creator = creator
        self.publisher = publisher
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, release, source_language, target_language, genre, license, title, creator, publisher, *args, **kwargs):  # noqa: E501
        """Metadata - a model defined in OpenAPI

        Args:
            release (str): The conditions under which this dictionary (or data from this dictionary) can be included in the ELEXIS Matrix Dictionary
            source_language (str): The language of the lemmas in the dictionary, as an ISO 639-1,2,3 code. If a (two-letter) ISO 639-1 code exists this should be used in preference
            target_language ([str]): The languages of the entries in the dictionary, can be identical to the source language or another language (for example in a bilingual dictionary).
            genre ([str]): The genre of the dictionary.  `gen` **General dictionaries** are dictionaries that document contemporary vocabulary and are intended for everyday reference by native and fluent speakers.    `lrn` **Learners' dictionaries** are intended for people who are learning the language as a second language.   `ety` **Etymological dictionaries** are dictionaries that explain the origins of words.   `spe` **Dictionaries on special topics** are dictionaries that focus on a specific subset of the vocabulary (such as new words or phrasal verbs) or which focus on a specific dialect or variant of the language.   `his` **Historical dictionaries** are dictionaries that document previous historical states of the language.   `ort` **Spelling dictionaries** are dictionaries which codify the correct spelling and other aspects of the orthography of words.    `trm` **Terminological dictionaries** describe the vocabulary of specialized domains such as biology, mathematics or economics.   
            license (bool, date, datetime, dict, float, int, list, str, none_type): The license that can be used to republish this data
            title (str): The title of the resource
            creator ([Agent]): The creator of the resource
            publisher ([Agent]): The publisher of This Resource

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            abstract (str): A summary of the resource.. [optional]  # noqa: E501
            accrual_method (str): The method by which items are added to a collection.. [optional]  # noqa: E501
            accrual_periodicity (str): The frequency with which items are added to a collection.. [optional]  # noqa: E501
            accrual_policy (str): The policy governing the addition of items to a collection.. [optional]  # noqa: E501
            alternative (str): An alternative name for the resource.. [optional]  # noqa: E501
            audience (str): A class of entity for whom the resource is intended or useful.. [optional]  # noqa: E501
            available (date): Date that the resource became or will become available.. [optional]  # noqa: E501
            bibliographic_citation (str): A bibliographic reference for the resource.. [optional]  # noqa: E501
            conforms_to (str): An established standard to which the described resource conforms.. [optional]  # noqa: E501
            contributor ([Agent]): An entity responsible for making contributions to the resource.. [optional]  # noqa: E501
            coverage (str): The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.. [optional]  # noqa: E501
            created (date): Date of creation of the resource.. [optional]  # noqa: E501
            date (DateTime): A point or period of time associated with an event in the lifecycle of the resource.. [optional]  # noqa: E501
            date_accepted (date): Date of acceptance of the resource.. [optional]  # noqa: E501
            date_copyrighted (date): Date of copyright.. [optional]  # noqa: E501
            date_submitted (date): Date of submission of the resource.. [optional]  # noqa: E501
            description (str): An account of the resource.. [optional]  # noqa: E501
            education_level (str): A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.. [optional]  # noqa: E501
            extent (str): The size or duration of the resource.. [optional]  # noqa: E501
            has_format (str): A related resource that is substantially the same as the pre-existing described resource, but in another format.. [optional]  # noqa: E501
            has_part (str): A related resource that is included either physically or logically in the described resource.. [optional]  # noqa: E501
            has_version (str): A related resource that is a version, edition, or adaptation of the described resource.. [optional]  # noqa: E501
            identifier (str): An unambiguous reference to the resource within a given context.. [optional]  # noqa: E501
            instructional_method (str): A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.. [optional]  # noqa: E501
            is_format_of (str): A related resource that is substantially the same as the described resource, but in another format.. [optional]  # noqa: E501
            is_part_of (str): A related resource in which the described resource is physically or logically included.. [optional]  # noqa: E501
            is_referenced_by (str): A related resource that references, cites, or otherwise points to the described resource.. [optional]  # noqa: E501
            is_replaced_by (str): A related resource that supplants, displaces, or supersedes the described resource.. [optional]  # noqa: E501
            is_required_by (str): A related resource that requires the described resource to support its function, delivery, or coherence.. [optional]  # noqa: E501
            issued (date): Date of formal issuance (e.g., publication) of the resource.. [optional]  # noqa: E501
            is_version_of (str): A related resource of which the described resource is a version, edition, or adaptation.. [optional]  # noqa: E501
            mediator ([AgentClass]): An entity that mediates access to the resource and for whom the resource is intended or useful.. [optional]  # noqa: E501
            modified (date): Date on which the resource was changed.. [optional]  # noqa: E501
            provenance (str): A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.. [optional]  # noqa: E501
            references (str): A related resource that is referenced, cited, or otherwise pointed to by the described resource.. [optional]  # noqa: E501
            relation (str): A related resource.. [optional]  # noqa: E501
            replaces (str): A related resource that is supplanted, displaced, or superseded by the described resource.. [optional]  # noqa: E501
            requires (str): A related resource that is required by the described resource to support its function, delivery, or coherence.. [optional]  # noqa: E501
            rights (str): Information about rights held in and over the resource.. [optional]  # noqa: E501
            rights_holder ([Agent]): A person or organization owning or managing rights over the resource.. [optional]  # noqa: E501
            source (str): A related resource from which the described resource is derived.. [optional]  # noqa: E501
            spatial (str): Spatial characteristics of the resource.. [optional]  # noqa: E501
            subject (str): The topic of the resource.. [optional]  # noqa: E501
            table_of_contents (str): A list of subunits of the resource.. [optional]  # noqa: E501
            temporal (str): Temporal characteristics of the resource.. [optional]  # noqa: E501
            type (str): The nature or genre of the resource.. [optional]  # noqa: E501
            valid (date): Date of validity of a resource.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.release = release
        self.source_language = source_language
        self.target_language = target_language
        self.genre = genre
        self.license = license
        self.title = title
        self.creator = creator
        self.publisher = publisher
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
